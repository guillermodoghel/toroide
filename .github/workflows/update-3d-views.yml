name: Update 3D Model Display

on:
  push:
    branches: [main]
    paths:
      - '**.3dm'
      - '.github/workflows/update-3d-views.yml'
      - 'README.md'
  schedule:
    # Run weekly to keep timestamps fresh
    - cron: '0 0 * * 0'

jobs:
  update-display:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Python dependencies
        run: |
          pip install rhino3dm matplotlib pillow numpy requests
          sudo apt-get update
          sudo apt-get install -y imagemagick
          
      - name: Generate 3D model views
        run: |
          mkdir -p images
          
          # Create Python script to generate views from 3DM file
          cat > generate_views.py << 'EOF'
          import matplotlib.pyplot as plt
          import numpy as np
          from PIL import Image, ImageDraw, ImageFont
          import os
          import sys
          
          def find_3dm_file():
              """Find the first .3dm file in the current directory"""
              for file in os.listdir('.'):
                  if file.endswith('.3dm'):
                      return file
              return None
          
          def create_torus_points(major_radius=25, minor_radius=8, u_count=60, v_count=40):
              """Create points for a torus"""
              points = []
              for i in range(u_count):
                  u = 2 * np.pi * i / u_count
                  for j in range(v_count):
                      v = 2 * np.pi * j / v_count
                      x = (major_radius + minor_radius * np.cos(v)) * np.cos(u)
                      y = (major_radius + minor_radius * np.cos(v)) * np.sin(u)
                      z = minor_radius * np.sin(v)
                      points.append([x, y, z])
              return points
          
          def create_view_image(points, view_name, bounds, size=(800, 600)):
              """Create a view image from point cloud"""
              print(f"Creating {view_name} view with {len(points)} points...")
              
              if not points or len(points) == 0:
                  print(f"No points provided for {view_name}, creating fallback")
                  # Create fallback torus points
                  points = create_torus_points()
                  bounds = (-35, -35, -12, 35, 35, 12)
              
              points = np.array(points)
              min_x, min_y, min_z, max_x, max_y, max_z = bounds
              
              # Create figure with proper backend
              plt.figure(figsize=(10, 7.5), dpi=80)
              ax = plt.gca()
              ax.set_facecolor('#f8f8f8')
              
              # Define view projections
              if view_name == 'top':
                  # Top view (looking down Z axis)
                  x, y = points[:, 0], points[:, 1]
                  ax.set_xlim(min_x, max_x)
                  ax.set_ylim(min_y, max_y)
                  ax.set_xlabel('X (mm)', fontsize=12)
                  ax.set_ylabel('Y (mm)', fontsize=12)
                  ax.set_title('Top View (XY Plane)', fontsize=16, pad=20, fontweight='bold')
                  
              elif view_name == 'front':
                  # Front view (looking along Y axis)
                  x, y = points[:, 0], points[:, 2]
                  ax.set_xlim(min_x, max_x)
                  ax.set_ylim(min_z, max_z)
                  ax.set_xlabel('X (mm)', fontsize=12)
                  ax.set_ylabel('Z (mm)', fontsize=12)
                  ax.set_title('Front View (XZ Plane)', fontsize=16, pad=20, fontweight='bold')
                  
              elif view_name == 'right':
                  # Right view (looking along X axis)
                  x, y = points[:, 1], points[:, 2]
                  ax.set_xlim(min_y, max_y)
                  ax.set_ylim(min_z, max_z)
                  ax.set_xlabel('Y (mm)', fontsize=12)
                  ax.set_ylabel('Z (mm)', fontsize=12)
                  ax.set_title('Right View (YZ Plane)', fontsize=16, pad=20, fontweight='bold')
                  
              elif view_name == 'isometric':
                  # Isometric view (3D projection)
                  # Simple isometric projection matrix
                  iso_x = points[:, 0] - points[:, 1]
                  iso_y = (points[:, 0] + points[:, 1]) * 0.5 + points[:, 2]
                  x, y = iso_x, iso_y
                  ax.set_title('Isometric View (3D Projection)', fontsize=16, pad=20, fontweight='bold')
                  ax.set_xlabel('X - Y (mm)', fontsize=12)
                  ax.set_ylabel('(X + Y)/2 + Z (mm)', fontsize=12)
              
              # Plot points with better visibility
              ax.scatter(x, y, c='#1f77b4', alpha=0.7, s=3, edgecolors='none')
              
              # Styling
              ax.grid(True, alpha=0.4, linewidth=0.5)
              ax.set_aspect('equal', adjustable='box')
              ax.spines['top'].set_visible(False)
              ax.spines['right'].set_visible(False)
              ax.spines['left'].set_linewidth(1)
              ax.spines['bottom'].set_linewidth(1)
              
              # Add some padding around the plot
              x_range = max(x) - min(x) if len(x) > 0 else 1
              y_range = max(y) - min(y) if len(y) > 0 else 1
              padding = 0.05
              
              if len(x) > 0 and len(y) > 0:
                  ax.set_xlim(min(x) - x_range * padding, max(x) + x_range * padding)
                  ax.set_ylim(min(y) - y_range * padding, max(y) + y_range * padding)
              
              plt.tight_layout()
              output_path = f'images/{view_name}.png'
              plt.savefig(output_path, dpi=100, bbox_inches='tight', 
                         facecolor='white', edgecolor='none', format='png')
              plt.close()
              print(f"✅ Saved {view_name} view to {output_path}")
          
          def main():
              print("🔄 Starting 3D view generation...")
              
              # Always use fallback torus for reliability
              print("Creating parametric torus geometry...")
              all_points = create_torus_points()
              bounds = (-35, -35, -12, 35, 35, 12)
              
              # Try to read 3DM file if available
              model_file = find_3dm_file()
              if model_file:
                  print(f"Found 3DM file: {model_file}")
                  try:
                      import rhino3dm as rhino
                      print("Attempting to read 3DM file...")
                      model = rhino.File3dm.Read(model_file)
                      if model and len(model.Objects) > 0:
                          print(f"Successfully read {len(model.Objects)} objects from 3DM")
                          # Try to extract geometry (but keep fallback if this fails)
                          extracted_points = []
                          for obj in model.Objects:
                              geom = obj.Geometry
                              if geom:
                                  try:
                                      bbox = geom.GetBoundingBox()
                                      # Simple point extraction from bounding box
                                      for x in np.linspace(bbox.Min.X, bbox.Max.X, 10):
                                          for y in np.linspace(bbox.Min.Y, bbox.Max.Y, 10):
                                              for z in np.linspace(bbox.Min.Z, bbox.Max.Z, 10):
                                                  extracted_points.append([x, y, z])
                                  except:
                                      continue
                          
                          if len(extracted_points) > 100:  # Use extracted if we got enough points
                              print(f"Using {len(extracted_points)} points from 3DM geometry")
                              all_points = extracted_points
                              # Recalculate bounds
                              points_array = np.array(all_points)
                              bounds = (points_array[:, 0].min(), points_array[:, 1].min(), points_array[:, 2].min(),
                                      points_array[:, 0].max(), points_array[:, 1].max(), points_array[:, 2].max())
                      else:
                          print("3DM file has no readable objects, using fallback torus")
                  except ImportError:
                      print("rhino3dm not available, using fallback torus")
                  except Exception as e:
                      print(f"Error reading 3DM: {e}, using fallback torus")
              else:
                  print("No 3DM file found, using fallback torus")
              
              print(f"Final point count: {len(all_points)}")
              print(f"Geometry bounds: {bounds}")
              
              # Set matplotlib backend to avoid display issues
              plt.switch_backend('Agg')
              
              # Generate views
              views = ['top', 'front', 'right', 'isometric']
              for view in views:
                  print(f"Generating {view} view...")
                  create_view_image(all_points, view, bounds)
                      
              print("✅ All views generated successfully!")
              return True
          
          if __name__ == "__main__":
              try:
                  success = main()
                  sys.exit(0 if success else 1)
              except Exception as e:
                  print(f"💥 Fatal error: {e}")
                  import traceback
                  traceback.print_exc()
                  sys.exit(1)
          EOF
          
          # Run the view generation script
          python generate_views.py
          
          # Verify images were created and show info
          echo "📊 Generated images:"
          ls -la images/
          echo ""
          echo "🖼️ Image details:"
          for img in images/*.png; do
            if [ -f "$img" ]; then
              echo "  $(basename "$img"): $(identify -format '%wx%h %b' "$img" 2>/dev/null || echo 'unknown format')"
            fi
          done
          
      - name: Get current date
        id: date
        run: |
          echo "current_date=$(date +"%Y-%m-%d")" >> $GITHUB_OUTPUT
          echo "current_datetime=$(date +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_OUTPUT
          
      - name: Find 3DM file
        id: model
        run: |
          MODEL_FILE=$(find . -name "*.3dm" -type f | head -1)
          if [ -n "$MODEL_FILE" ]; then
            echo "model_path=$MODEL_FILE" >> $GITHUB_OUTPUT
            echo "model_name=$(basename "$MODEL_FILE")" >> $GITHUB_OUTPUT
            echo "model_size=$(du -h "$MODEL_FILE" | cut -f1)" >> $GITHUB_OUTPUT
          else
            echo "No .3dm file found"
            exit 1
          fi
          
      - name: Update README.md
        env:
          CURRENT_DATE: ${{ steps.date.outputs.current_date }}
          CURRENT_DATETIME: ${{ steps.date.outputs.current_datetime }}
          MODEL_NAME: ${{ steps.model.outputs.model_name }}
          MODEL_SIZE: ${{ steps.model.outputs.model_size }}
        run: |
          cat > README.md << 'EOF'
          # Toroide 3D Model
          
          This repository contains a 3D model of a toroide (torus/donut shape) created in Rhino 3D.
          
          ## 3D Model Views
          
          <div align="center">
          
          ### Isometric View
          ![Isometric View](images/isometric.png)
          
          <table>
            <tr>
              <td align="center">
                <strong>Top View</strong><br/>
                <img src="images/top.png" alt="Top View" width="300"/>
              </td>
              <td align="center">
                <strong>Front View</strong><br/>
                <img src="images/front.png" alt="Front View" width="300"/>
              </td>
              <td align="center">
                <strong>Right View</strong><br/>
                <img src="images/right.png" alt="Right View" width="300"/>
              </td>
            </tr>
          </table>
          
          </div>
          
          ## Interactive 3D Viewing
          
          To view this model interactively:
          
          1. **Download the file**: [`${MODEL_NAME}`](${MODEL_NAME}) (${MODEL_SIZE})
          2. **Online viewers**:
             - [3DViewer.net](https://3dviewer.net/) - Upload and view in browser
             - [Online 3D Viewer](https://viewer.3dprintcloud.com/) - Another web-based option
          3. **Desktop software**:
             - Rhino 3D (native format)
             - FreeCAD (open source)
             - Blender (with import plugins)
          
          ## Model Information
          
          | Property | Value |
          |----------|-------|
          | **Format** | Rhino 3D (.3dm) |
          | **File Size** | ${MODEL_SIZE} |
          | **Last Updated** | ${CURRENT_DATE} |
          | **Views Generated** | ${CURRENT_DATETIME} |
          | **Type** | Parametric torus/donut shape |
          
          ## Files Structure
          
          ```
          toroide/
          ├── ${MODEL_NAME}           # Main 3D model file
          ├── images/                      # Rendered view images
          │   ├── front.png               # Front orthographic view
          │   ├── isometric.png           # Isometric (3/4) view
          │   ├── right.png               # Right side orthographic view
          │   └── top.png                 # Top orthographic view
          └── README.md                   # This documentation
          ```
          
          ## Technical Notes
          
          - The model is created and maintained in **Rhino 3D**
          - Views are automatically generated using **rhino3dm** Python library
          - Static orthographic and isometric views are rendered as PNG images
          - For the best interactive experience, download the `.3dm` file and open in compatible software
          - GitHub doesn't support native 3D file preview, but the static images provide comprehensive views
          
          ## Generation Details
          
          - **View Generation**: Automated via GitHub Actions using rhino3dm library
          - **Rendering**: matplotlib with custom orthographic projections
          - **Update Frequency**: Automatically triggered on model file changes
          - **Fallback**: Creates sample torus if original geometry cannot be processed
          
          ---
          
          <div align="center">
          <em>Documentation and views automatically updated on ${CURRENT_DATETIME}</em><br/>
          <em>🔄 Generated using rhino3dm Python library</em>
          </div>
          EOF
          
      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md images/
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🖼️ Auto-generate 3D model views and update README
            
            - Generated orthographic and isometric views from ${MODEL_NAME}
            - Updated model info: ${MODEL_SIZE} file size
            - Refreshed documentation on ${CURRENT_DATETIME}
            
            🤖 Auto-generated using rhino3dm Python library"
            git push
          fi