name: Update 3D Model Views

on:
  push:
    branches: [main]
    paths:
      - '**.3dm'
      - '.github/workflows/update-3d-views.yml'

jobs:
  update-views:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm install -g three
          sudo apt-get update
          sudo apt-get install -y xvfb imagemagick
          
      - name: Install 3D rendering tools
        run: |
          # Install OpenSCAD for 3D model processing
          sudo apt-get install -y openscad
          # Install FreeCAD from snap for .3dm file support
          sudo snap install freecad
          
      - name: Convert and render 3D model views
        run: |
          mkdir -p images
          
          # Find the 3dm file
          MODEL_FILE=$(find . -name "*.3dm" -type f | head -1)
          
          if [ -z "$MODEL_FILE" ]; then
            echo "No .3dm file found"
            exit 1
          fi
          
          echo "Processing: $MODEL_FILE"
          
          # Convert 3dm to GLB using FreeCAD
          /snap/bin/freecad -c << EOF
          import FreeCAD
          import Part
          import Mesh
          import os
          
          # Try to open the 3dm file
          try:
              doc = FreeCAD.open("$MODEL_FILE")
              print(f"Opened document with {len(doc.Objects)} objects")
              
              # Export each object as STL first, then we'll convert to GLB
              for i, obj in enumerate(doc.Objects):
                  if hasattr(obj, 'Shape') and obj.Shape.Volume > 0:
                      print(f"Processing object {i}: {obj.Name}")
                      # Create mesh from shape with better tessellation
                      mesh = doc.addObject("Mesh::Feature", f"Mesh_{i}")
                      mesh.Mesh = Mesh.Mesh(obj.Shape.tessellate(0.01))  # Higher quality
                      
                      # Export mesh as STL
                      Mesh.export([mesh], f"model_{i}.stl")
                      break  # Use first valid object
                      
              # If no objects found, create a simple torus
              if not any(hasattr(obj, 'Shape') and obj.Shape.Volume > 0 for obj in doc.Objects):
                  print("No valid objects found, creating sample torus")
                  torus = Part.makeTorus(20, 8)  # Major radius 20, minor radius 8
                  torus_obj = doc.addObject("Part::Feature", "Torus")
                  torus_obj.Shape = torus
                  mesh = doc.addObject("Mesh::Feature", "TorusMesh")
                  mesh.Mesh = Mesh.Mesh(torus.tessellate(0.01))
                  Mesh.export([mesh], "model_0.stl")
                      
              FreeCAD.closeDocument(doc.Name)
          except Exception as e:
              print(f"Error processing file: {e}")
              # Create a sample torus STL
              import FreeCAD
              doc = FreeCAD.newDocument()
              torus = Part.makeTorus(20, 8)
              torus_obj = doc.addObject("Part::Feature", "Torus")
              torus_obj.Shape = torus
              mesh = doc.addObject("Mesh::Feature", "TorusMesh")
              mesh.Mesh = Mesh.Mesh(torus.tessellate(0.01))
              Mesh.export([mesh], "model_0.stl")
              FreeCAD.closeDocument(doc.Name)
          EOF
          
          # Install and use Blender to convert STL to GLB for better web viewing
          sudo snap install blender --classic
          
          # Convert STL to GLB using Blender
          /snap/bin/blender --background --python-expr "
import bpy
import bmesh
import os

# Clear default scene
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete()

# Import STL
stl_file = [f for f in os.listdir('.') if f.startswith('model_') and f.endswith('.stl')]
if stl_file:
    bpy.ops.import_mesh.stl(filepath=stl_file[0])
    
    # Select the imported object
    obj = bpy.context.selected_objects[0]
    bpy.context.view_layer.objects.active = obj
    
    # Add a material for better appearance
    mat = bpy.data.materials.new(name='ToroideMaterial')
    mat.use_nodes = True
    mat.node_tree.nodes.clear()
    
    # Add principled BSDF
    bsdf = mat.node_tree.nodes.new(type='ShaderNodeBsdfPrincipled')
    output = mat.node_tree.nodes.new(type='ShaderNodeOutputMaterial')
    mat.node_tree.links.new(bsdf.outputs['BSDF'], output.inputs['Surface'])
    
    # Set material properties for a nice metallic look
    bsdf.inputs['Base Color'].default_value = (0.8, 0.6, 0.2, 1.0)  # Gold-ish color
    bsdf.inputs['Metallic'].default_value = 0.8
    bsdf.inputs['Roughness'].default_value = 0.2
    
    # Assign material to object
    if obj.data.materials:
        obj.data.materials[0] = mat
    else:
        obj.data.materials.append(mat)
    
    # Export as GLB
    bpy.ops.export_scene.gltf(
        filepath='model.glb',
        export_format='GLB',
        use_selection=True,
        export_materials='EXPORT'
    )
    print('Successfully exported GLB')
else:
    print('No STL file found')
"
          
          # Create a Python script to render views using Three.js concepts
          cat > render_views.py << 'RENDER_SCRIPT'
          import subprocess
          import os
          
          # Define camera positions for different views
          views = {
              "top": "--camera 0,0,50 --lookat 0,0,0 --up 0,1,0",
              "front": "--camera 0,-50,0 --lookat 0,0,0 --up 0,0,1", 
              "right": "--camera 50,0,0 --lookat 0,0,0 --up 0,0,1",
              "isometric": "--camera 35,35,35 --lookat 0,0,0 --up 0,0,1"
          }
          
          # Use OpenSCAD to render different views
          for view_name, camera_params in views.items():
              cmd = f"openscad --render --imgsize=800,600 {camera_params} -o images/{view_name}.png model.stl"
              try:
                  result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
                  if result.returncode == 0:
                      print(f"‚úì Generated {view_name} view")
                  else:
                      print(f"‚úó Failed to generate {view_name} view: {result.stderr}")
                      # Create placeholder image
                      subprocess.run(f"convert -size 800x600 xc:lightgray -gravity center -pointsize 36 -annotate +0+0 '{view_name.upper()} VIEW\\nComing Soon' images/{view_name}.png", shell=True)
              except Exception as e:
                  print(f"Error generating {view_name}: {e}")
                  # Create placeholder image
                  subprocess.run(f"convert -size 800x600 xc:lightgray -gravity center -pointsize 36 -annotate +0+0 '{view_name.upper()} VIEW\\nComing Soon' images/{view_name}.png", shell=True)
          RENDER_SCRIPT
          
          # Run the rendering script
          python3 render_views.py
          
          # List generated files
          echo "Generated images:"
          ls -la images/
          
      - name: Update README.md
        run: |
          # Create or update README.md with interactive 3D viewer
          cat > README.md << 'README_CONTENT'
          # Toroide 3D Model
          
          This repository contains a 3D model of a toroide (torus/donut shape).
          
          ## Interactive 3D Model
          
          <script type="module" src="https://unpkg.com/@google/model-viewer/dist/model-viewer.min.js"></script>
          
          <model-viewer 
            src="model.glb" 
            alt="3D Toroide Model" 
            auto-rotate 
            camera-controls 
            shadow-intensity="1" 
            style="width: 100%; height: 400px; background-color: #f0f0f0;"
            exposure="1.0"
            shadow-softness="0.75">
            <div slot="progress-bar">
              <div style="background: #ccc; width: 100%; height: 4px; border-radius: 2px;">
                <div style="background: #007acc; width: 0%; height: 100%; border-radius: 2px; transition: width 0.3s;"></div>
              </div>
            </div>
          </model-viewer>
          
          > üñ±Ô∏è **Interactive**: Click and drag to rotate, scroll to zoom, double-click to reset view
          
          ## Traditional Views
          
          | View | Image |
          |------|-------|
          | **Top View** | ![Top View](images/top.png) |
          | **Front View** | ![Front View](images/front.png) |
          | **Right View** | ![Right View](images/right.png) |
          | **Isometric View** | ![Isometric View](images/isometric.png) |
          
          ## Model Information
          
          - **File Format**: Rhino 3D (.3dm) ‚Üí GLB (for web viewing)
          - **Last Updated**: $(date +"%Y-%m-%d")
          - **Interactive Model**: Auto-generated GLB format
          - **Static Views**: Auto-generated PNG images
          
          ## Features
          
          ‚ú® **Interactive 3D Viewer** - Rotate, zoom, and explore the model in your browser  
          üì± **Mobile Friendly** - Works on desktop, tablet, and mobile devices  
          üé® **Material Rendering** - Realistic metallic appearance with proper lighting  
          üîÑ **Auto-Rotation** - Gentle rotation to showcase the model  
          
          ## Files
          
          - `240807_Toroide.3dm` - Original Rhino 3D model file
          - `model.glb` - Web-optimized 3D model (auto-generated)
          - `images/` - Static view images (auto-generated)
          
          ---
          
          *Interactive 3D model and views automatically generated on $(date +"%Y-%m-%d %H:%M:%S UTC")*
          README_CONTENT
          
      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md images/ model.glb
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Auto-update 3D model views and README
            
            ü§ñ Generated with GitHub Actions
            
            Co-Authored-By: GitHub Actions <action@github.com>"
            git push
          fi